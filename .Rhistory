geom_line(temp_df, mapping = aes(Month, Tmax), color = "blue") +
geom_line(temp_df, mapping = aes(Month, Tmin), color = "red") +
geom_abline(slope = 0, intercept = 9.8, linetype = "dashed", color = "darkgreen") +
geom_abline(slope = 0, intercept = 17.3, linetype = "dashed", color = "darkgreen") +
scale_x_date() +
labs(x = "Month", y = "Temperature (°C)", subtitle = "2090 Temperature Projection under 13GCPs at UBCBG")
### line plot:
ggplot() +
geom_line(temp_df, mapping = aes(Month, Tmax), color = "blue") +
geom_line(temp_df, mapping = aes(Month, Tmin), color = "red") +
geom_abline(slope = 0, intercept = 9.8, linetype = "dashed", color = "darkgreen") +
geom_abline(slope = 0, intercept = 17.3, linetype = "dashed", color = "darkgreen") +
scale_x_date(Month) +
labs(x = "Month", y = "Temperature (°C)", subtitle = "2090 Temperature Projection under 13GCPs at UBCBG")
### line plot:
ggplot() +
geom_line(temp_df, mapping = aes(Month, Tmax), color = "blue") +
geom_line(temp_df, mapping = aes(Month, Tmin), color = "red") +
geom_abline(slope = 0, intercept = 9.8, linetype = "dashed", color = "darkgreen") +
geom_abline(slope = 0, intercept = 17.3, linetype = "dashed", color = "darkgreen") +
scale_x_date(temp_df$Month) +
labs(x = "Month", y = "Temperature (°C)", subtitle = "2090 Temperature Projection under 13GCPs at UBCBG")
### line plot:
ggplot() +
geom_line(temp_df, mapping = aes(Month, Tmax), color = "blue") +
geom_line(temp_df, mapping = aes(Month, Tmin), color = "red") +
geom_abline(slope = 0, intercept = 9.8, linetype = "dashed", color = "darkgreen") +
geom_abline(slope = 0, intercept = 17.3, linetype = "dashed", color = "darkgreen") +
scale_x_date(temp_df$Month, labels = date_format("%b")) +
labs(x = "Month", y = "Temperature (°C)", subtitle = "2090 Temperature Projection under 13GCPs at UBCBG")
library(scales)
### line plot:
ggplot() +
geom_line(temp_df, mapping = aes(Month, Tmax), color = "blue") +
geom_line(temp_df, mapping = aes(Month, Tmin), color = "red") +
geom_abline(slope = 0, intercept = 9.8, linetype = "dashed", color = "darkgreen") +
geom_abline(slope = 0, intercept = 17.3, linetype = "dashed", color = "darkgreen") +
scale_x_date(temp_df$Month, labels = date_format("%b")) +
labs(x = "Month", y = "Temperature (°C)", subtitle = "2090 Temperature Projection under 13GCPs at UBCBG")
### line plot:
ggplot() +
geom_line(temp_df, mapping = aes(Month, Tmax), color = "blue") +
geom_line(temp_df, mapping = aes(Month, Tmin), color = "red") +
geom_abline(slope = 0, intercept = 9.8, linetype = "dashed", color = "darkgreen") +
geom_abline(slope = 0, intercept = 17.3, linetype = "dashed", color = "darkgreen") +
scale_x_date(labels = date_format("%b")) +
labs(x = "Month", y = "Temperature (°C)", subtitle = "2090 Temperature Projection under 13GCPs at UBCBG")
temp_df <- bind_cols(tmax, tmin) %>%
rename(Max_Month = name...1,
Tmax = value...2,
Min_Month = name...3,
Tmin = value...4) %>%
slice(5:16) %>%
mutate(Month = as_date(1:12)) %>%
select(Month = Month,
Tmax = Tmax,
Tmin = Tmin)
View(temp_df)
temp_df <- bind_cols(tmax, tmin) %>%
rename(Max_Month = name...1,
Tmax = value...2,
Min_Month = name...3,
Tmin = value...4) %>%
slice(5:16) %>%
mutate(Month = as_date(1:12, format = "%M")) %>%
select(Month = Month,
Tmax = Tmax,
Tmin = Tmin)
temp_df <- bind_cols(tmax, tmin) %>%
rename(Max_Month = name...1,
Tmax = value...2,
Min_Month = name...3,
Tmin = value...4) %>%
slice(5:16) %>%
mutate(Month = as_date(1:12, format = "%b")) %>%
select(Month = Month,
Tmax = Tmax,
Tmin = Tmin)
temp_df <- bind_cols(tmax, tmin) %>%
rename(Max_Month = name...1,
Tmax = value...2,
Min_Month = name...3,
Tmin = value...4) %>%
slice(5:16) %>%
mutate(Month = as_date(1:12, format = "%m")) %>%
select(Month = Month,
Tmax = Tmax,
Tmin = Tmin)
View(temp_df)
temp_df <- bind_cols(tmax, tmin) %>%
rename(Max_Month = name...1,
Tmax = value...2,
Min_Month = name...3,
Tmin = value...4) %>%
slice(5:16) %>%
select(Tmax = Tmax,
Tmin = Tmin)
View(temp_df)
help("as_date)
\
/
//
\\
\\\\\\\\\
""
fa
//
\\/\
help(as_date)
months <- as_date(1:12)
months <- as_date(1:12, format = "%M")
months <- as_date(1:12, format = "%j")
### line plot:
ggplot() +
geom_line(temp_df, mapping = aes(Month, Tmax), color = "blue") +
geom_line(temp_df, mapping = aes(Month, Tmin), color = "red") +
geom_abline(slope = 0, intercept = 9.8, linetype = "dashed", color = "darkgreen") +
geom_abline(slope = 0, intercept = 17.3, linetype = "dashed", color = "darkgreen") +
labs(x = "Month", y = "Temperature (°C)", subtitle = "2090 Temperature Projection under 13GCPs at UBCBG")
temp_df <- bind_cols(tmax, tmin) %>%
rename(Max_Month = name...1,
Tmax = value...2,
Min_Month = name...3,
Tmin = value...4) %>%
slice(5:16) %>%
mutate(Month = month(1:12)) %>%
select(Month = Month,
Tmax = Tmax,
Tmin = Tmin)
### line plot:
ggplot() +
geom_line(temp_df, mapping = aes(Month, Tmax), color = "blue") +
geom_line(temp_df, mapping = aes(Month, Tmin), color = "red") +
geom_abline(slope = 0, intercept = 9.8, linetype = "dashed", color = "darkgreen") +
geom_abline(slope = 0, intercept = 17.3, linetype = "dashed", color = "darkgreen") +
labs(x = "Month", y = "Temperature (°C)", subtitle = "2090 Temperature Projection under 13GCPs at UBCBG")
### line plot:
ggplot() +
geom_line(temp_df, mapping = aes(Month, Tmax), color = "blue") +
geom_line(temp_df, mapping = aes(Month, Tmin), color = "red") +
geom_abline(slope = 0, intercept = bound, linetype = "dashed", color = "darkgreen") +
geom_abline(slope = 0, intercept = 17.3, linetype = "dashed", color = "darkgreen") +
labs(x = "Month", y = "Temperature (°C)", subtitle = "2090 Temperature Projection under 13GCPs at UBCBG")
### line plot:
ggplot() +
geom_line(temp_df, mapping = aes(Month, Tmax), color = "blue") +
geom_line(temp_df, mapping = aes(Month, Tmin), color = "red") +
geom_abline(slope = 0, intercept = bound, linetype = "dashed", color = "darkgreen") +
labs(x = "Month", y = "Temperature (°C)", subtitle = "2090 Temperature Projection under 13GCPs at UBCBG")
boxplot(griseum_norm$MAT)
library(dismo) #species distribution modelling
#dismo also loads raster and sp
#raster and sp have been explored in GEM520 lab8
library(dplyr) #data manipulation
library(ggplot2) #plotting nice things
#species data
griseum_tree_data = read.csv(file = "C:/Users/csteve02.stu/Desktop/FCOR 599/GIS/Acer_griseum_both.csv")
griseum_tree_data = select(griseum_tree_data, #selecting location data only
"long" = decimalLongitude,
"lat" = decimalLatitude)
present_climate = getData(name = "worldclim", #downloading climate data 'standard' b/w 1970-2000
var = "bio", #all 19 bioclimatic variables; or tmax, precip...
res = "2.5", #resolution at 2.5 minutes
path = "climatedata") #where data is stored
#minimizing extent of present climate data to extract values
gris_ext <- extent( min(griseum_tree_data$long),
max(griseum_tree_data$long),
min(griseum_tree_data$lat),
max(griseum_tree_data$lat))
present_climate_crop <- crop(present_climate, extent(gris_ext)) #cropping to griseum tree extent in China
present_climate = getData(name = "worldclim", #downloading climate data 'standard' b/w 1970-2000
var = "bio", #all 19 bioclimatic variables; or tmax, precip...
res = "2.5", #resolution at 2.5 minutes
path = "climatedata") #where data is stored
#environmental data
#Creating folders for data organization
dir.create(path = "climatedata") #new folder in wd() for climate data
present_climate = getData(name = "worldclim", #downloading climate data 'standard' b/w 1970-2000
var = "bio", #all 19 bioclimatic variables; or tmax, precip...
res = "2.5", #resolution at 2.5 minutes
path = "climatedata") #where data is stored
93.604-112.682
library(raster)
library(dismo)
library(rgeos)
library(sp)
library(sf)
library(raster)
??sampleRandom
library(sp)      ## Loading package
library(gstat)   ## Loading package
install.packages("nlme")
library(nlme)   ## Loading package
# a) Load data
boreality <- read.table("C:/Users/csteve02.stu/Downloads/GEM540_A8/GEM540_A8/Boreality.txt", header=T, sep = " ")
View(boreality)
# a) Load data
boreality <- read.table("C:/Users/csteve02.stu/Downloads/GEM540_A8/GEM540_A8/Boreality.txt", header=T, sep = "")
View(boreality)
head(boreality)
names(boreality)
boreality$Oxalis <- as.factor()
??as.factor
boreality$Oxalis <- as.factor(boreality$Oxalis)
View(boreality)
## Add variable and convert into factor variable
boreality$Bor <- sqrt(((nBor + 1)/nTot))
## Add variable and convert into factor variable
boreality$Bor <- sqrt(((boreality$nBor + 1)/boreality$nTot))
summary(boreality)
#################################################################################
# b) Fit multiple linear regression models predicting 'Bor'
# Full model
model.full <- lm(Bor ~ Wet + Grn + NDVI + T61 + Oxalis, data = boreality)
summary(model.full)
## Add variable and convert into factor variable
boreality$Bor <- sqrt((boreality$nBor + 1)/boreality$nTot)
summary(boreality)
# Which variable should be dropped based on the least sums of squares?
d1 <- drop1(model.full)
d1[order(d1[,2]),]
summary(model.full)
??update
anova(model.full)
# Drop the variable by the least sums of squares
model.test <- update(model.full, .~.-NDVI, data=boreality)
# Check if the reduced model is different from the full model
# Rename the reduced model
anova(model.test, model.full)
model.1 <- model.test
model.test <- update(model.1, .~.-Grn, data=boreality)
anova(model.test, model.1)
model.2 <- model.test
??glm.fit
anova(model.full)
m <- update(model.full, .~.-Oxalis, data = boreality)
summary(m)
anova(m)
rm(m)
# Should we drop another variable?
model.test <- update(model.2, .~.-T61, data=boreality)
anova(model.test, model.2)
model.3 <- model.test
# Calculate AIC and BIC
# Which model is the best based on AIC and BIC? If they differ, explain why.
AIC(model.full)
AIC(model.1)
AIC(model.2)
AIC(model.3)
BIC(model.full)
BIC(model.1)
BIC(model.2)
BIC(model.3)
#install.packages("sp")
library(sp)      ## Loading package
#install.packages("gstat")
library(gstat)   ## Loading package
#install.packages("nlme")
library(nlme)   ## Loading package
# a) Load data
boreality <- read.table("C:/Users/csteve02.stu/Downloads/GEM540_A8/GEM540_A8/Boreality.txt", header=T, sep = "")
## Add variable and convert into factor variable
boreality$Bor <- sqrt((boreality$nBor + 1)/boreality$nTot)
boreality$Oxalis <- as.factor(boreality$Oxalis)
#################################################################################
# b) Fit multiple linear regression models predicting 'Bor'
# Full model
model.full <- lm(Bor ~ Wet + Grn + NDVI + T61 + Oxalis, data = boreality)
# Which variable should be dropped based on the least sums of squares?
d1 <- drop1(model.full)
d1[order(d1[,2]),]
# Drop the variable by the least sums of squares
model.test <- update(model.full, .~.-NDVI, data=boreality)
# Check if the reduced model is different from the full model
# Rename the reduced model
anova(model.test, model.full)
model.1 <- model.test
model.test <- update(model.1, .~.-Grn, data=boreality)
anova(model.test, model.1)
model.2 <- model.test
# Should we drop another variable?
model.test <- update(model.2, .~.-T61, data=boreality)
anova(model.test, model.2)
model.3 <- model.test
# Calculate AIC and BIC
# Which model is the best based on AIC and BIC? If they differ, explain why.
AIC(model.full)
AIC(model.1)
AIC(model.2)
AIC(model.3)
BIC(model.full)
BIC(model.1)
BIC(model.2)
BIC(model.3)
par(mfrow=c(2,2),oma=c(0,0,2,0))
scatter.smooth(boreality$Bor,fitted(model.2),
cex.lab=1.3, cex.axis=1.2, cex.main=1.5,
ylab="Fitted", xlab="Observed Bor",
main="Model Structure (I)", col="darkgray")
abline(0,1, col="red")
scatter.smooth(fitted(model.2), resid(model.2, type="pearson"),
cex.lab=1.3, cex.axis=1.2, cex.main=1.5,
main="Residual Plot", xlab="Fitted", col="darkgray",
ylab="Pearson's Resid")
abline(h=0, col="red")
qqnorm(resid(model.2, type="pearson"), main="Q-Q Norm",
cex.lab=1.3, cex.axis=1.2, cex.main=1.5)
qqline(resid(model.2, type="pearson"), col="red")
hist(resid(model.2, type="pearson"), col="gray",
xlab="Residuals", main="Histogram or Residuals",
cex.lab=1.3, cex.axis=1.2, cex.main=1.5)
# Shapiro-Wilks test
shapiro.test(resid(model.2, type="pearson"))
# e) Convert the boreality data to a spatial data frame
coordinates(boreality) <- c("x", "y")
# Create bubble plot of residuals. Do you think the residuals show
# spatial autocorrelation?
boreality$resid <- rstandard(model.2)
bubble(boreality, "resid", main = "MLR Residuals", col=c("black", "gray"))
# f) Calculate and plot a variogram for the residuals
print(bor.vgm <- variogram(resid~1, boreality))
plot(bor.vgm)
# Basic variogram models available in gstat
show.vgms()
vgm()
abline(600,0)
plot(bor.vgm)
abline(600,0)
bor.fit <- fit.variogram(bor.vgm, model=vgm(psill=(1.1-0.7), model="Sph", range=800, nugget=0.7))
# Check if the variogram model fits the empirical variogram
plot(bor.vgm, bor.fit)
bor.fit <- fit.variogram(bor.vgm, model=vgm(psill=(1.5-0.7), model="Sph", range=800, nugget=0.7))
# Check if the variogram model fits the empirical variogram
plot(bor.vgm, bor.fit)
# Check if the variogram model fits the empirical variogram
plot(bor.vgm, bor.fit, col = "red")
bor.fit <- fit.variogram(bor.vgm, model=vgm(psill=(1.5-0.7), model="Sph", range=800, nugget=0.6))
# Check if the variogram model fits the empirical variogram
plot(bor.vgm, bor.fit, col = "red")
bor.fit <- fit.variogram(bor.vgm, model=vgm(psill=(1.5-0.7), model="Sph", range=2000, nugget=0.7))
# Check if the variogram model fits the empirical variogram
plot(bor.vgm, bor.fit, col = "red")
bor.fit <- fit.variogram(bor.vgm, model=vgm(psill=(1.5-0.7), model="Cir", range=800, nugget=0.7))
# Check if the variogram model fits the empirical variogram
plot(bor.vgm, bor.fit, col = "red")
vgm()
# Basic variogram models available in gstat
show.vgms()
bor.fit <- fit.variogram(bor.vgm, model=vgm(psill=(1.5-0.7), model="Exc", range=800, nugget=0.7))
# Check if the variogram model fits the empirical variogram
plot(bor.vgm, bor.fit, col = "red")
bor.fit <- fit.variogram(bor.vgm, model=vgm(psill=(1.5-0.7), model="Sph", range=800, nugget=0.7))
# Check if the variogram model fits the empirical variogram
plot(bor.vgm, bor.fit, col = "red")
# Fit a least squares model with the selected variables
# Note: Need to fit the model using gls() to be able to compare with
# generalized least squares model that includes correlation structure
f1 <- formula(model.2)
B1.gls <- gls(f1, data = boreality)
# Fit a generalized least squares model with a correlation structure
# Example for exponential variogram model
B1Exp <- gls(f1, correlation=corExp(form=~x+y, nugget=T), data=boreality)
# Create a bubble plot of the residuals of the GLS model
boreality$gls.resids <- residuals(B1Exp, type = "normalized")
bubble(boreality, "gls.resids", col = c("black", "grey"), main = "GLS Residuals")
# h) Report and compare AIC and BIC of the spatial model
AIC(B1.gls)
AIC(B1Exp)
BIC(B1.gls)
BIC(B1Exp)
2807380+1602680+41165+160245+263470+221515
8000000000/637
10120000000/647
15641422*20
13800000000+(7541495*20)
5096455*20
read.csv("C:\Users\csteve02.stu\Desktop\FCOR 599\Acer_ItemData_Oct2021.csv")
read.csv("C:/Users/csteve02.stu/Desktop/FCOR 599/Acer_ItemData_Oct2021.csv")
all <- read.csv("C:/Users/csteve02.stu/Desktop/FCOR 599/Acer_ItemData_Oct2021.csv")
View(all)
colnames(all)
library(dplyr)
View(all)
all$LocationCoordLatDD
all$LocationCoordLongDD
all$Species
all <- select(all, species, LocationCoordLatDD, LocationCoordLongDD)
all <- select(all, Species, LocationCoordLatDD, LocationCoordLongDD)
View(all)
help(rename)
all <- select(all, Species, LocationCoordLatDD, LocationCoordLongDD) %>%
rename(lat = LocationCoordLatDD,
long = LocationCoordLongDD)
View(all)
help("write.csv")
write.csv(all, file = "C:/Users/csteve02.stu/Desktop/FCOR 599/Acer_LatLong.csv")
# present_climate <- rast("C:/Users/csteve02.stu/Desktop/FCOR 599/maxent/predrasters/ag_current.tif")
# present_climate <- stack(present_climate)
climate_ssp245_2050 <- rast("C:/Users/csteve02.stu/Desktop/FCOR 599/maxent/predrasters/ag_ssp245_50.tif")
library(dismo)#species distribution modelling
#dismo also loads raster and sp
library(dplyr) #general data manipulation
library(terra) #for reading tif files & raster manipulation
library(maps) #draw geographical maps
library(mapdata) #extra maps
library(maptools) #handling spatial objects
library(rJava) #to use MaxEnt
library(sf) #reading in garden polygon
library(RColorBrewer) #for nice colours in maps
library(corrplot) #for looking at correlation
library(ggplot2) #for final histograms
# present_climate <- rast("C:/Users/csteve02.stu/Desktop/FCOR 599/maxent/predrasters/ag_current.tif")
# present_climate <- stack(present_climate)
climate_ssp245_2050 <- rast("C:/Users/csteve02.stu/Desktop/FCOR 599/maxent/predrasters/ag_ssp245_50.tif")
tree.ssp245.50 <- stack(climate_ssp245_2050)
plot(tree.ssp245.50)
plot(tree.ssp245.50, ext = extent(-124,-122,48,50))
map('worldHires',
xlim=c(min(-124),
max(-122)),
ylim=c(min(48),
max(50)),
fill = FALSE,
add = TRUE)
plot(tree.ssp245.50, ext = extent(-126,-120,48,50))
map('worldHires',
xlim=c(min(-124),
max(-122)),
ylim=c(min(48),
max(50)),
fill = FALSE,
add = TRUE)
# present_climate <- rast("C:/Users/csteve02.stu/Desktop/FCOR 599/maxent/predrasters/ag_current.tif")
# present_climate <- stack(present_climate)
climate_ssp245_2050 <- rast("C:/Users/csteve02.stu/Desktop/FCOR 599/maxent/predrasters/am_ssp245_50.tif")
tree.ssp245.50 <- stack(climate_ssp245_2050)
plot(tree.ssp245.50, ext = extent(-126,-120,48,50))
map('worldHires',
xlim=c(min(-124),
max(-122)),
ylim=c(min(48),
max(50)),
fill = FALSE,
add = TRUE)
# present_climate <- rast("C:/Users/csteve02.stu/Desktop/FCOR 599/maxent/predrasters/ag_current.tif")
# present_climate <- stack(present_climate)
climate_ssp245_2050 <- rast("C:/Users/csteve02.stu/Desktop/FCOR 599/maxent/predrasters/am_ssp245_50.tif")
library(dismo)#species distribution modelling
#dismo also loads raster and sp
library(dplyr) #general data manipulation
library(terra) #for reading tif files & raster manipulation
library(maps) #draw geographical maps
library(mapdata) #extra maps
library(maptools) #handling spatial objects
library(rJava) #to use MaxEnt
library(sf) #reading in garden polygon
library(RColorBrewer) #for nice colours in maps
library(corrplot) #for looking at correlation
library(ggplot2) #for final histograms
# present_climate <- rast("C:/Users/csteve02.stu/Desktop/FCOR 599/maxent/predrasters/ag_current.tif")
# present_climate <- stack(present_climate)
climate_ssp245_2050 <- rast("C:/Users/csteve02.stu/Desktop/FCOR 599/maxent/predrasters/am_ssp245_50.tif")
tree.ssp245.50 <- stack(climate_ssp245_2050)
plot(tree.ssp245.50, ext = extent(-126,-120,48,50))
map('worldHires',
xlim=c(min(-124),
max(-122)),
ylim=c(min(48),
max(50)),
fill = FALSE,
add = TRUE)
# present_climate <- rast("C:/Users/csteve02.stu/Desktop/FCOR 599/maxent/predrasters/ag_current.tif")
# present_climate <- stack(present_climate)
climate_ssp245_2050 <- rast("C:/Users/csteve02.stu/Desktop/FCOR 599/maxent/predrasters/ag_ssp245_50.tif")
tree.ssp245.50 <- stack(climate_ssp245_2050)
plot(tree.ssp245.50, ext = extent(-126,-120,48,50))
map('worldHires',
xlim=c(min(-124),
max(-122)),
ylim=c(min(48),
max(50)),
fill = FALSE,
add = TRUE)
points(tree_data$long, tree_data$lat, pch = 2, col = "darkgreen")
plot(tree.ssp245.50, ext = extent(-124.5,-123,49,49.5))
citation()
citation("terra")
citation("dismo")
##Data Loading & Processing:
setwd("C:/Users/csteve02.stu/Desktop/CStevens_FCOR599_AcerSDM_20220408_raw")
#present environmental data for extraction
present_climate = getData(name = "worldclim", #downloading climate data 'standard' b/w 1970-2000
var = "bio", #all 19 bioclimatic variables; or tmax, precip...
res = "2.5", #resolution at 2.5 minutes
path = "climatedata") #where data is stored
library(dismo)#species distribution modelling
#dismo also loads raster and sp
library(dplyr) #general data manipulation
library(terra) #for reading tif files & raster manipulation
library(maps) #draw geographical maps
library(mapdata) #extra maps
library(maptools) #handling spatial objects
library(rJava) #to use MaxEnt
library(sf) #reading in garden polygon
library(RColorBrewer) #for nice colours in maps
library(corrplot) #for looking at correlation
library(ggplot2) #for final histograms
#present environmental data for extraction
present_climate = getData(name = "worldclim", #downloading climate data 'standard' b/w 1970-2000
var = "bio", #all 19 bioclimatic variables; or tmax, precip...
res = "2.5", #resolution at 2.5 minutes
path = "climatedata") #where data is stored
